name: Gateway Tests

on:
  - pull_request
  - push


jobs:
   integration-tests:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout rucio containers repository
        uses: actions/checkout@v3
        with:
          repository: rucio/rucio
          fetch-depth: 0

      - uses: actions/checkout@v3
        name: Checkout webui
        with:
          path: webui
          fetch-depth: 0
      
      - name: Select tag for rucio backend containers
        shell: bash
        run: |
          # Get current branch and corresponding latest tag in webui repo
          BRANCH=$(git rev-parse --abbrev-ref HEAD)
          
          OWNER="${{ github.repository_owner }}"
          if [ $OWNER != 'rucio' ]; then
            echo "The workflow is running in user ${OWNER}'s fork. 
          fi

          echo "On branch ${BRANCH}"
          if [ $BRANCH == 'master' ]; then
              GIT_REF="master"
          else
              GIT_REF=$(git describe --tags --abbrev=0)
              IFS=. read major minor micro build <<<"${GIT_REF}"
              RELEASE_FAMILY=$major.$minor
              LATEST_RELEASE_IN_RELEASE_FAMILY=$(git for-each-ref --format '%(refname)' refs/tags/$RELEASE_FAMILY.* | sort -k 1.11V | tail -1 | awk -F'/' '{print $3}')
              LATEST_RUCIO_RELEASE_FAMILY=$(git for-each-ref --format '%(refname)' refs/tags | sort -k 1.11V | tail -1 | awk -F'/' '{print $3}' | awk -F'.' '{print $1 "." $2}')
              echo "Release line for ${BRANCH} is ${RELEASE_FAMILY}"
              echo "The latest release line for rucio is ${LATEST_RUCIO_RELEASE_FAMILY}"
              echo "The latest release in ${RELEASE_FAMILY} is ${LATEST_RELEASE_IN_RELEASE_FAMILY}"
              if [ $LATEST_RUCIO_RELEASE_FAMILY = $RELEASE_FAMILY ]; then
                  GIT_REF='master' # always use containers/master when working on latest rucio/rucio release line
              else
                  GIT_REF=$LATEST_RELEASE_IN_RELEASE_FAMILY # for non-master release line, use the latest rucio/containers tag for the given release family
              fi
          fi
          cd $GITHUB_WORKSPACE
          # Check if rucio/containers has a corresponding $GIT_REF
          if [ $(git tag -l "$GIT_REF") ]; then
              git checkout tags/$GIT_REF
          else
              echo "Tag $GIT_REF not found in rucio/containers. Integration test containers will be built against the master branch instead."
              git checkout master
          fi
      - name: Use rucio/containers Dockerfile for integration tests
        shell: bash
        run: |
          sed -i 's;RUN git clone .*;COPY ./rucio /tmp/rucio;' $GITHUB_WORKSPACE/dev/Dockerfile
      - name: Build rucio-dev images
        id: images
        shell: bash
        run: |
          docker login https://ghcr.io -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}
          docker-compose -f $GITHUB_WORKSPACE/dev/rucio/etc/docker/dev/docker-compose-storage-externalmetadata.yml pull
          i=0; until [ "$i" -ge 3 ]; do
            IMAGES=$(echo '${{ toJson(matrix.cfg) }}' | $GITHUB_WORKSPACE/dev/rucio/tools/test/build_images.py --output list \
                --cache-repo ghcr.io/${{ github.repository }} --branch "${{ needs.setup.outputs.branch }}" \
                $GITHUB_WORKSPACE/dev || echo "")
            if [[ -n $IMAGES ]]; then break;
            else
              i=$((i+1)); sleep 5;
              echo "::warning::Building images failed, retryingâ€¦"
            fi
          done
          docker logout https://ghcr.io
          if [[ -z "$IMAGES" ]]; then echo "::error::Building images failed ultimately"; exit 1; fi
          echo "::set-output name=images::$IMAGES"
      - name: Prepare Docker Compose
        shell: bash
        run: |
          docker image ls
          sed -i 's;image: docker.io/rucio/rucio-dev.*;image: ${{ fromJSON(steps.images.outputs.images)[0] }};' \
              $GITHUB_WORKSPACE/dev/rucio/etc/docker/dev/docker-compose-storage-externalmetadata.yml
      - name: Start containers
        run: docker-compose -f $GITHUB_WORKSPACE/dev/rucio/etc/docker/dev/docker-compose-storage-externalmetadata.yml up -d
      - name: Initialize tests
        shell: bash
        run: |
          docker exec -t dev_rucio_1 cp etc/rse-accounts.cfg.template etc/rse-accounts.cfg
          docker exec -t dev_rucio_1 tools/run_tests_docker.sh -ir